name: Generate Swatches

on:
  push:
    paths:
      - 'materials/**'
      - 'swatch/**'
      - 'scripts/**'
      - '.github/workflows/generate-swatches.yml'
      - 'printers/**'
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openscad prusa-slicer jq
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Create output directories
      run: |
        mkdir -p output/3mf
        mkdir -p output/gcode
        
    - name: Process materials
      run: |
        # Read each material CSV file
        find materials -name "*.csv" -type f | while read -r csv_file; do
          echo "Processing $csv_file..."
          
          # Skip header line and process each material
          tail -n +2 "$csv_file" | while IFS=, read -r material brand color profile temperature; do
            # Create safe name for filenames
            safe_name="${brand}_${material}_${color}"
            safe_name=$(echo "$safe_name" | tr ' ' '_' | tr -dc '[:alnum:]_-')
            
            echo "Generating model for $safe_name..."
            
            # Process each printer configuration
            jq -c '.printers[]' printers/config.json | while read -r printer; do
              printer_name=$(echo $printer | jq -r '.name')
              printer_profile=$(echo $printer | jq -r '.profile')
              
              # Create safe printer name for filenames
              safe_printer_name=$(echo "$printer_name" | tr ' ' '_' | tr -dc '[:alnum:]_-')
              
              # Process each print profile
              echo $printer | jq -r '.print_profiles[]' | while read -r print_profile; do
                # Create safe profile name for filenames
                profile_type=$(echo "$print_profile" | grep -o 'QUALITY\|DRAFT')
                safe_profile_type=$(echo "$profile_type" | tr '[:upper:]' '[:lower:]')
                
                # Extract layer height from profile name (e.g., "0.20mm QUALITY" -> 0.20)
                layer_height=$(echo "$print_profile" | grep -o '[0-9]\.[0-9]\+' || echo "0.20")
                
                echo "Slicing model for $safe_name on $printer_name with $print_profile..."
                output_name="${safe_name}_${safe_printer_name}_${safe_profile_type}"
                
                # Generate 3MF with built-in ironing settings
                if ! python3 scripts/generate_3mf.py \
                  --material "$material" \
                  --brand "$brand" \
                  --color "$color" \
                  --printer "$printer_name" \
                  --profile "$print_profile" \
                  --temperature "$temperature" \
                  --layer-height "$layer_height"; then
                  echo "Error: Failed to generate model for $output_name"
                  exit 1
                fi
                
                # Generate GCODE with ironing enabled
                if ! prusa-slicer \
                  --export-gcode \
                  --load "slicer-profiles/PrusaResearch/2.1.11.ini" \
                  --printer "$printer_profile" \
                  --print "$print_profile" \
                  --filament "$profile" \
                  --print-settings "ironing=1" \
                  --print-settings "ironing_type=top" \
                  --print-settings "ironing_flowrate=15" \
                  "output/3mf/${output_name}.3mf" \
                  --output "output/gcode/${output_name}.gcode"; then
                  echo "Error: Failed to generate GCODE for $output_name"
                  exit 1
                fi
              done
            done
          done
        done
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: swatches
        path: |
          output/3mf/*.3mf
          output/gcode/*.gcode
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          output/3mf/*.3mf
          output/gcode/*.gcode
        name: "Swatch Models ${{ github.sha }}"
        tag_name: "v${{ github.run_number }}"
        body: "Automatically generated swatch models and GCODE files ready for Printables upload"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 